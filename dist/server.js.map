{"version":3,"sources":["../server.js"],"names":["app","require","debug","http","https","fs","certbasepath","privkeypath","certpath","chainpath","certsExist","existsSync","privateKey","certificate","ca","console","log","readFileSync","credentials","key","cert","port","normalizePort","process","env","PORT","set","httpServer","createServer","httpsServer","listen","on","onError","val","parseInt","isNaN","error","syscall","bind","code","exit"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require('./app');\nvar debug = require('debug')('joinsdn:server');\nconst http = require('http');\nconst https = require('https');\nconst fs = require('fs');\n\nconst certbasepath = '/etc/letsencrypt/live/joinsdn.com/'\nconst privkeypath = 'privkey.pem'\nconst certpath = 'cert.pem'\nconst chainpath = 'chain.pem'\nvar certsExist = fs.existsSync(certbasepath + privkeypath) && fs.existsSync(certbasepath + certpath) && fs.existsSync(certbasepath + chainpath);\n\nlet privateKey = null;\nlet certificate = null;\nlet ca = null;\n\nif(!certsExist){\n  console.log(\"No certifications found. HTTPS server will not start. Port 443 will not be used.\")\n}else{\n  privateKey = fs.readFileSync(certbasepath + privkeypath, 'utf8');\n  certificate = fs.readFileSync(certbasepath + certpath, 'utf8');\n  ca = fs.readFileSync(certbasepath + chainpath, 'utf8');\n}\n\n\n\n\nconst credentials = {\n  key: privateKey,\n  cert: certificate,\n  ca: ca\n};\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '80');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nconst httpServer = http.createServer(app);\nlet httpsServer = null;\nif (certsExist){\n  httpsServer = https.createServer(credentials, app);\n}\n\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nhttpServer.listen(port);\nhttpServer.on('error', onError);\n// httpServer.on('listening', onListening);\nif(certsExist){\n  httpsServer.listen(443);\n  httpsServer.on('error', onError);\n}\n// httpsServer.on('listening', onListening);\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\n// function onListening() {\n//   var addr = server.address();\n//   var bind = typeof addr === 'string'\n//     ? 'pipe ' + addr\n//     : 'port ' + addr.port;\n//   debug('Listening on ' + bind);\n// }\n"],"file":"server.js"}