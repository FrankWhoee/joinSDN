{"version":3,"sources":["../server.js"],"names":["app","require","debug","http","https","fs","privateKey","readFileSync","certificate","ca","credentials","key","cert","port","normalizePort","process","env","PORT","set","httpServer","createServer","httpsServer","listen","on","onError","val","parseInt","isNaN","error","syscall","bind","code","console","exit"],"mappings":"AAAA;;AAEA;AACA;AACA;;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,gBAAjB,CAAZ;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMK,UAAU,GAAGD,EAAE,CAACE,YAAH,CAAgB,+CAAhB,EAAiE,MAAjE,CAAnB;AACA,IAAMC,WAAW,GAAGH,EAAE,CAACE,YAAH,CAAgB,4CAAhB,EAA8D,MAA9D,CAApB;AACA,IAAME,EAAE,GAAGJ,EAAE,CAACE,YAAH,CAAgB,6CAAhB,EAA+D,MAA/D,CAAX;AAEA,IAAMG,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAEL,UADa;AAElBM,EAAAA,IAAI,EAAEJ,WAFY;AAGlBC,EAAAA,EAAE,EAAEA;AAHc,CAApB;AAMA;AACA;AACA;;AAEA,IAAII,IAAI,GAAGC,aAAa,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAAxB;AACAjB,GAAG,CAACkB,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;AAEA;AACA;AACA;;AAEA,IAAMM,UAAU,GAAGhB,IAAI,CAACiB,YAAL,CAAkBpB,GAAlB,CAAnB;AACA,IAAMqB,WAAW,GAAGjB,KAAK,CAACgB,YAAN,CAAmBV,WAAnB,EAAgCV,GAAhC,CAApB;AAGA;AACA;AACA;;AAEAmB,UAAU,CAACG,MAAX,CAAkBT,IAAlB;AACAM,UAAU,CAACI,EAAX,CAAc,OAAd,EAAuBC,OAAvB,E,CACA;;AAEAH,WAAW,CAACC,MAAZ,CAAmBT,IAAnB;AACAQ,WAAW,CAACE,EAAZ,CAAe,OAAf,EAAwBC,OAAxB,E,CACA;;AACA;AACA;AACA;;AAEA,SAASV,aAAT,CAAuBW,GAAvB,EAA4B;AAC1B,MAAIZ,IAAI,GAAGa,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAnB;;AAEA,MAAIE,KAAK,CAACd,IAAD,CAAT,EAAiB;AACf;AACA,WAAOY,GAAP;AACD;;AAED,MAAIZ,IAAI,IAAI,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASW,OAAT,CAAiBI,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,IAAI,GAAG,OAAOjB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd,CALsB,CAStB;;AACA,UAAQe,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,+BAArB;AACAf,MAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,oBAArB;AACAf,MAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;AAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require('./app');\nvar debug = require('debug')('joinsdn:server');\nconst http = require('http');\nconst https = require('https');\nconst fs = require('fs');\n\nconst privateKey = fs.readFileSync('/etc/letsencrypt/live/joinsdn.com/privkey.pem', 'utf8');\nconst certificate = fs.readFileSync('/etc/letsencrypt/live/joinsdn.com/cert.pem', 'utf8');\nconst ca = fs.readFileSync('/etc/letsencrypt/live/joinsdn.com/chain.pem', 'utf8');\n\nconst credentials = {\n  key: privateKey,\n  cert: certificate,\n  ca: ca\n};\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '8000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nconst httpServer = http.createServer(app);\nconst httpsServer = https.createServer(credentials, app);\n\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nhttpServer.listen(port);\nhttpServer.on('error', onError);\n// httpServer.on('listening', onListening);\n\nhttpsServer.listen(port);\nhttpsServer.on('error', onError);\n// httpsServer.on('listening', onListening);\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\n// function onListening() {\n//   var addr = server.address();\n//   var bind = typeof addr === 'string'\n//     ? 'pipe ' + addr\n//     : 'port ' + addr.port;\n//   debug('Listening on ' + bind);\n// }\n"],"file":"server.js"}